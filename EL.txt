=====EL(Expression Language)=====
참고자료: 최범균 교재

>EL
	일종의 스크립트 언어로 자료타입, 연산자 등을 제공

>EL 구성
	${  } 형태
	액션태그/JSTL의 속성값에 쓸 수 있음
	비스크립트 요소 부분에서도 값을 출력하기위해 사용 가능
	JSP의 스크립트 요소(스크립트릿<% %>, 표현식<%= %>, 선언부<%! %> ) 제외한
	나머지에서 사용 가능

>EL의 장점
	표현식 <%=  %> 보다 간결하고 이해하기 쉬움
	표현식보다 편리하게 값 출력
	==> 실제 프로젝트에서 표현식보다는 표현 언어 사용

>EL의 데이터 타입과 리터럴
	1) Boolean 타입: true, false
	2) 정수타입: 0~9로 이루어진 값. 음수는 '-' 붙음. java.lang.Long 타입
	3) 실수타입: 0~9. 소수점 '.' 사용. 지수형 가능(e).  java.lang.Double 타입
	4) 문자열타입: '나 "로 둘러쌓인 문자열. java.lang.String 타입
		'로 표현 -> 문자열 안의 '는 \'로 표현
		\기호 자체는 \\로 표현
	5) 널타입: null	// EL은 값이 존재하지 않는 경우 null출력x. 아무것도 출력안함

>EL의 기본 객체
	JSP는 웹 어플리케이션을 구현하는 데 필요한 요청, 응답, 세션 등에 쉽게 접근할 수 있도록
	request, response, session 등의 기본 객체 제공
	JSP는 EL에서 사용할 수 있는 기본 객체도 제공
	이 객체를 통해서 요청 파라미터나 세션 속성값 등을 표현언어에서 사용 가능

	주요 기본객체
		1) pageContext : JSP의 pageContext 기본객체와 동일
			*pageContext: JSP페이지와 1대1로 연결된 객체
				       다른 기본 객체에 접근 할 수 있음
				       속성 처리하기
				       페이지의 흐름 제어하기
				       에러데이터 구하기 의 기능을 가지고 있음
		2) param: 요청 파라미터의 <파라미터 이름, 값> 매핑을 저장한 Map 객체
			 파라미터 값 타입은 String이며, request.getParameter(이름)과 결과 동일
		3) ~Scope: ~기본 객체에 저장된 <속성, 값> 매핑을 저장한 Map 객체
		4) ~Values: <이름, 값 배열>매핑을 저장한 Map 객체

>객체 접근
	EL 언어는 객체에 저장된 값에 접근할 때 점(.)이나 대괄호 ([])사용
		<표현1>.<표현2> or <표현1>[<표현2>]
>객체 탐색
	EL에서 PAGE, REQUEST, SESSION, APPLICATION 영역에 저장된 속성에 접근할때
	~Scope 기본 객체 사용.
	영역을 나타내는 EL 기본객체를 사용하지 않고 이름만 지정하는 경우
	네개의 영역을 차례대로 검색해서 속성이 존재하는 지 확인
>연산자
	1) 수치연산자
		+, -, *, / or div, % or mod, -단항연산자(부호반대)
	2) 비교연산자
		== or eq, != or ne, < or lt, > or gt, <= or le, >= or ge
	3) 논리연산자
		&&(and), ||(or), !(not)
	4) empty 연산자
		검사할 객체가 텅 빈 객체인지를 검사하기 위해 사용
		empty <값>
	5) 비교 선택 연산자
		<수식> ? <값1> : <값2>
		<수식>의 결과값이 true이면 <값1>리턴, false 이면 <값2>리턴
	6) 문자열 연결
		EL 3.0버전부터 추가됨. += 연산자
		${"문자" += "열" += "연결"}  ==> "문자열연결"
	7) 컬렉션
		List타입 객체 생성==> [원소1, 원소2, 원소3]
		Map타입 객체 생성==> {'key1' : '값1', 'key2' : '값2'}
		Set타입 객체 생성==>{원소1, 원소2, 원소3}
		혼합도 가능
	8) 세미콜론 연산자
		${ A ; B } ==> A는 출력되지 않고 B값만 출력
		--> 할당연산자(=)의 결과를 응답결과에 포함 안시킬때 사용
 