스프링 프로젝트 구조 정리~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

[전체 구조]

STS0223 (프로젝트)
|
|-src/main/java
|	|-net.hb.dao
|	|   |-GuestDAO.java
|	| 
|	|-net.hb.dto
|	|   |-GuestDTO.java
|	|
|	|-net.hb.order//프로젝트 만들때 지정한 패키지
|   	    |-GuestController.java
|	    |-HomeController.java
|
|-src/main/resources
|	|-config.ibatis//우리가 생성
|	|   |-dao-context.xml
|	|   |-guest.xml
|	|   |-SqlMapConfig.xml
|	|
|	|-META-INF
|	|-db.properties
|
|- ...
|
|-src
|  |-main
|	|-webapp
|	   |-resources
|	   |	|-images
|	   |
|	   |-WEB-INF
|	   |	|-classes
|	   |	|-spring
|	   |	|   |-appServlet
|	   |	|   |	|-servlet-context.xml
|	   |	|   |
|	   |	|   |-root-context.xml
|	   |	|
|	   |	|-views
|	   |	|   |-guest.jsp
|	   |	|   |-guestList.jsp
|	   |	|   |-home.jsp
|	   |	|
|	   |	|-web.xml
|	   |	
|	   |-index.jsp
|
|-pom.xml




[spring project 만들면 자동으로 만들어지는 파일]

pom.xml
web.xml
servlet-context.xml
root-context.xml
home.jsp
HomeController.java




[서버 구동하면 인식되는/작동하는 순서]


xml부터 보면:
pom.xml, web.xml 인식
-> web.xml에서  DispatcherServlet이 servlet-context.xml 인식
-> servlet-context.xml에서 dao-context.xml 인식
->dao-context.xml에서  db.properties, SqlMapConfig.xml, SqlMapClientTemplate클래스 인식
-> 이중에서 SqlMapConfig.xml에서 guest.xml문서
-> guset.xml문서에서 id접근
-> guestDAO.java - GuestController.java - guest.jsp 연결~

view부터 보면:
view단: ~~~.jsp
->GuestController.java
->GuestDAO.java
->guest.xml문서 id접근
->SqlMapConfig.xml
->dao-context.xml
->servlet-context.xml
->web.xml문서에서 디스패쳐서블릿으로 servlet-context.xml참조



[작동하는거 하나씩 상세 설명]
1. pom.xml
POM = Project Object Model
It is an XML file that contains information about the project
and configuration(컴: 환경설정,구성) details used by Maven to build the project.
이 파일에 내가 만들 App에서 어떠한 라이브러리를 사용할 것인지 적어 놓기만 하면
Maven이 알아서 다운 받고 알아서 설치해 주고 경로도 지정해줌
*Maven
-라이브러리관리&빌드 툴
------------------------------ pom.xml에 삽입------------------------------
	<dependency>
		<groupId>org.apache.ibatis</groupId>
		<artifactId>ibatis-sqlmap</artifactId>
		<version>2.3.4.726</version>
	</dependency>
---------------------------------------------------------------------------
 ->c:\Users\1027\.m2\repository\org\apache\ibatis 생성


2. web.xml
web.xml안에 있는 DispatcherServlet에 의해서 servlet-context.xml인식
------------------------------ web.xml ---------------------------------
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet> 
------------------------------------------------------------------------


3. servlet-context.xml 에서 dao-context.xml 연결
------------------------ servlet-context.xml ---------------------------
<resources mapping="/resources/**" location="/resources/" />

<!-- dao-context.xml 연결 -->
<beans:import resource="classpath:/config/ibatis/dao-context.xml"/>

<!-- net.hb으로 시작하는 모든 패키지 인식 ->나중에 패키지 연결 -->
<context:component-scan base-package="net.hb.*" />
------------------------------------------------------------------------


4.dao-context.xml 에서
	- db.properties
	- SqlMapConfig.xml
	- SqlMapClientTemplate클래스
이 세가지 연결

4-1) db.properties
------------------------- db.properties -------------------------------
## oracle
## oracle
JDBC.driverClassName=oracle.jdbc.driver.OracleDriver
JDBC.url=jdbc:oracle:thin:@127.0.0.1:1521:XE
JDBC.username=system
JDBC.password=oracle
-----------------------------------------------------------------------
 [   ] = 값 <- 이런 형식으로 db 연결정보 작성

4-2) SqlMapConfig.xml에서 guest.xml연결
-------------------------- SqlMapConfig.xml ---------------------------
<sqlMapConfig>
    <settings enhancementEnabled="true" useStatementNamespaces="true"/>
    <!-- useStatementNamespaces="true" 쓰면 guest.xml에서 namespaces를 꼭 쓰겠다는 의미 -->
	<!-- sql 구문이 들어있는 파일 포함. -->
  	 <sqlMap resource="config/ibatis/guest.xml"/> 
</sqlMapConfig>
------------------------------------------------------------------------

4-3) SqlMapClientTemplate 클래스 인식
----------------------------------------- dao-context.xml ----------------------------------------
    <bean id="SqlMapClientTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
        <property name="sqlMapClient" ref="sqlMapClient"/>
    </bean>
--------------------------------------------------------------------------------------------------



5. guest.xml
여기에 쿼리문 작성!
------------------------------------------- guest.xml ---------------------------------------------
<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">

 <sqlMap  namespace="guest">
<!-- 아이디 중복일때 namespace를 줘서 guest.add 이런식으로 쓰면 중복id 문제 피할수 있음 -->
 	<typeAlias alias="dt" type="net.hb.dto.GuestDTO"/>

<!-- GuestDAO.java에서 SqlMapClientTemplate 이용해서 id로 guest.xml의 쿼리문 접근 -->
	<insert id="add"> 
	    insert into guest(sabun,name,title,nalja, pay)
	    values( #sabun#, #name#, #title#, sysdate, #pay# )
	</insert>
<!-- 입력할 값을 #으로 감싸주기 (#변수명#) -> DTO에서 가져온 변수에 접근해줌 -->

 <!-- selectAll789검색기능에 페이징추가  -->
 <select id="selectAll789" parameterClass="net.hb.dto.GuestDTO" resultClass="net.hb.dto.GuestDTO">
   select * from (
     select rownum as rn, sabun, name, title, nalja, pay from 
      (select * from guest where $skey$ like '%' || #sval# || '%' )
   )where rn between  #start#  and  #end#  
</select>

 	
 	<!-- selectAll2건드리지 마세요  -->
    <select id="selectAll"  resultClass="net.hb.dto.GuestDTO">
 	   select * from guest order by sabun   
 	</select>
 	
 	<select id="detail" resultClass="net.hb.dto.GuestDTO">
 	  select  * from  guest  where sabun=#sabun#
 	</select>
 	
 	<delete id="del">
 	   delete from guest  where sabun = #sabun#
 	</delete>
 	
 	<select id="countAll"  resultClass="int">
 	   select  count(*) as cnt from guest
 	</select>
  	
 	<update id="edit">
 	  update guest set name=#name#, title=#title#, nalja=sysdate,
 	  pay=#pay# where sabun=#sabun# 
 	</update>
 	
 </sqlMap>   
----------------------------------------------------------------------------------------------------


6. GuestDAO.java 에서 guest.xml을 id로 끌어다 쓰기(SqlMapClientTemplate 클래스 이용)
----------------------------------------- GuestDAO.java --------------------------------------------
@Repository	// 저장소 역할 = repository임을 명명해주는 annotation
public class GuestDAO { 

	@Autowired	//annotation
	private SqlMapClientTemplate temp;
		//This annotation allows Spring to resolve and inject collaborating beans into your bean.
		//그냥 선언만 해도 자동으로 new 써서 객체 생성한거처럼 연결해준다고 생각하면 됨

	public void db_insert(GuestDTO dto) {
		temp.insert("guest.add", dto);	
		//guest.xml의 "add" id로 접근하는 방법(add가 insert문이니까 temp.insert()사용)
		//만약 update문 쓰고싶으면 temp.update("guest.edit", dto); 써주면 됨.
		//(update문의 id가 edit으로 설정되어있을경우)
		System.out.println("GuestDAO.java db_insert() 저장성공");
	}// end

	
}// class END
----------------------------------------------------------------------------------------------------


7. GuestController.java에서 GuestDAO에서 선언한 메소드 활용해서 view로 넘겨줌
----------------------------------- GuestController.java -----------------------------------
@Controller
public class GuestController {

	private static final Logger logger = LoggerFactory.getLogger(GuestController.class);

	@Autowired
	GuestDAO dao; // 필드로선언 GuestDAO dao=new GuestDAO( )접근안함

	@RequestMapping(value = "/write.do", method = RequestMethod.GET)
	public String guest_form() {
		return "guest"; // WEB-INF/views/guest.jsp
	}// end

	@RequestMapping("/insert.do")
	public ModelAndView guest_insert(GuestDTO dto) {
		ModelAndView mav = new ModelAndView();
		dao.db_insert(dto);	//위에서 선언한 dao 사용
		mav.setViewName("redirect:list.do");
		return mav;
	}// end

	@RequestMapping("/list.do")
	public ModelAndView guest_select() {
		ModelAndView mav = new ModelAndView();
		List<GuestDTO> LG = dao.db_select();
		mav.addObject("naver",LG);
		mav.setViewName("guestList");
		return mav;
	}// end

}// GuestController class END
--------------------------------------------------------------------------------------------
*ModelAndView
1) Controller 처리 결과 후 응답할 view와 view에 전달할 값을 저장
2) 생성자
	- ModelAndView(String viewName): 응답할 view 설정
	- ModelAndView(String viewName, Map values): 응답할 view와 view로 전달할 값들을 저장한
		Map 객체
3) 주요 메서드
	- setViewName(String viewName): 응답할 view이름을 설정
	- addObject(String attributeName, Object attributeValue): view에 전달할 값을 설정
		->request영역에 설정됨
4) Redirect 방식 전송
	- view 이름에 redirect: 접두어를 붙임 
	  ex) mav.setViewName("redirect:/list.do");



8. ~~~.jsp ==> 처리한 데이터를 각각 알맞는 view에서 받아서 보여주기





