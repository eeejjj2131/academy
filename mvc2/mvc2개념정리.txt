=====MVC2 정리===== 
참고자료 : 최범균 JSP 교재
	  http://ilovebulk.tistory.com/5
	  http://www.chaijeom.com/3/1360.html

> MVC란?
	Model View Controller 형태의 패턴. 소프트웨어 개발의 구조적 패턴

> JSP 웹 어플리케이션의 구조 : 모델1과 모델2로 나눔
	모델1:	웹 브라우저의 요청을 JSP가 직접 처리
		(웹 브라우저의 요청을 받은 JSP는 java Bean/ DAO 등 이용해서
		 웹 브라우저가 요청한 작업을 처리하고 그 결과를 클라이언트에 출력)
		= JSP 페이지에 비즈니스 로직을 처리하기 위한 코드와
		   웹 브라우저에 결과를 출력하는 코드가 섞임
	* 비즈니스 로직? 
		데이터베이스와 사용자인터페이스 사이의 정보교환을 처리하는 알고리즘
	
	모델2:	웹 브라우저의 요청을 하나의 서블릿이 받음
		서블릿은 웹 브라우저의 요청을 알맞게 처리한 후 
		그 결과를 보여줄 JSP페이지로 포워딩 한다.
		포워딩을 통해 요청 흐름을 받은 JSP 페이지는 결과 화면을 클라이언트에 전송
		이 과정에서 서블릿이 로직 처리
		특징:	웹 브라우저의 모든 요청을 단일 진입점(하나의 서블릿)에서 처리
		     	서블릿은 웹 브라우저의 요청을 처리 한 후
			웹 브라우저에 보이게 될 응답화면 생성할 JSP 선택
		--> 이러한 구조가 MVC 패턴과 맞닿아 있음

	비교 : 
	모델 1 = 하나의 파일에서 3가지의 영역이 혼합되어 사용되며 
		모든 비지니스 로직이 들어가 있는 방식.
		이럴 경우 작업 시간을 단축되겠지만 
		확장성, 재사용성이 불편해진다. 
		예를 들어 모델1방식으로 제작된 게시판에서 
		상세 보기에서 불러오는 쿼리 하나를 수정하면 
		게시판 수정페이지의 쿼리도 수정해주어야한다. 
		유지보수하기에도 엄청 불편해진다. 
	이럴 단계로 쪼갠 것이 모델 2 방식이라고 보면 된다. 
	모델2 방식은 프로그램 수행 부분과 요청 결과 페이지를 분리하도록 되어 있다.
	대부분의 모델2 방식은 MVC패턴으로 설계되어 진다.

> MVC패턴
	사용자 인터페이스로부터 비즈니스 로직을 분리
	=> 애플리케이션의 시각적 요소/그 이면에서 실행되는 비즈니스 로직 
	=> 서로 영향 없이 쉽게 고칠 수 있는 애플리케이션을 만들 수 있음
	M(Model)은 애플리케이션의 정보(데이터)/비즈니스 영역의 로직 처리(DAO, bean)
	V(View)는 텍스트, 체크박스 항목 등과 같은 사용자 인터페이스 요소
		  비즈니스영역에 대한 프레젠테이션 뷰(사용자가 보게 될 결과 화면)(JSP)
	C(Controller)는 데이터와 비즈니스 로직 사이의 상호동작을 관리
		        사용자의 입력처리와 흐름제어 담당(서블릿)
	사용자가 요청 -> 컨트롤러 -> 비즈니스로직처리는 모델에서 -> 뷰 선택 하고 뷰가 응답
	사용자가 근본적으로 접근하고자 곳이 View(JSP)인데, 
	View에서 보고자 하는 DATA를 요청하는 곳이 Controller, 
	Controller가 요청한 DATA를 처리하는 곳이 Model 되겠다.

	핵심: 비즈니스로직을 처리하는 모델과 결과화면을 보여주는 뷰를 분리
	       어플리케이션의 흐름제어나 사용자의 처리 요청은 컨트롤러에 집중
	MVC1= MVC + 모델1
	MVC2= MVC + 모델2 형식

> MVC의 Controller : Servlet
	모델2 구조에서 서블릿은 MVC 패턴의 컨트롤러 역할을 한다.
	서블릿은 웹 브라우저의 요청과 웹 어플리케이션의 전체적인 흐름 제어
	서블릿이 웹 브라우저의 요청을 처리하는 5단계:
		1) 웹 브라우저가 전송한 HTTP 요청을 받는다. 서블릿의 doGet()/doPost()메소드 호출
		2) 클라이언트가 요구하는 기능 분석(어떤 기능 요청했는지 ex.목록/글쓰기)
		3) 모델을 사용하여 요청한 기능 수행(요청한 비즈니스로직을 처리하는 모델 사용)
		4) 모델로부터 전달받은 결과물을 알맞게 가공한 후
		   request나 session의 setAttribute("가짜", 진짜)메서드 사용 ->결과값을 속성에 저장
		   이렇게 저장한 결과값은 뷰인 JSP에서 사용(getAttribute("가짜")나 EL, JSTL사용) 
			(그냥 임포트하거나 가져다가 쓸수가 없음.) request 이용해야함.
		5) 웹브라우저에 결과를 전송할 JSP를 선택후 해당 JSP로 
		   포워딩(dispatcher사용)/리다이렉트
	*request/session: 웹 어플리케이션의 네가지 영역 중 하나. 
	request가 범용성 더큼. session은 로그인 인증할때 쓰면 용이함
	웹어플리케이션의 영역
		page 영역: 하나의 JSP페이지를 처리할 때 사용되는 영역
		request 영역: 하나의 HTTP요청을 처리할 때 사용되는 영역
		session 영역: 하나의 웹 브라우저와 관련된 영역
		application 영역: 하나의 웹 어플리케이션과 관련된 영역
	각 영역은 각각 관련된 기본객체 있음
		PAGE - pageContext기본객체
		REQUEST - request기본객체
		SESSION - session 기본객체
		APPLICATION - application기본객체

> EL/JSTL
	EL : Expression Language
	     ${  } 이런형태
	JSTL : JSP Standard Tag Library
	     주로 코어, 국제화 태그를 많이 씀
	     jar파일 다운받고 JSP페이지 맨 위에
		<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%> 써줌
 자세한건 다음 파일에....